{"version":3,"sources":["../../../test-kit/matchers/dataTypeMatchersSpec.js"],"names":[],"mappings":";;;;;;;;;;;QAAO,QAAQ;;QACP,iBAAiB,qBAAjB,iBAAiB;QACjB,MAAM,SAAN,MAAM;QAAE,GAAG,SAAH,GAAG;;AAEnB,YAAQ,CAAC,eAAe,EAAE,YAAM;;AAE5B,gBAAQ,CAAC,eAAe,EAAE,YAAM;;AAE5B,gBAAI,QAAQ,GAAG,iBAAiB,CAAC;AAC7B,oBAAI,EAAE,QAAQ,CAAC,MAAM;aACxB,CAAC,CAAC;;AAEH,cAAE,CAAC,0DAA0D,EAAE,YAAM;AACjE,sBAAM,CAAC,YAAU;AACb,0BAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;iBACjD,CAAC,CAAC,EAAE,SAAM,CAAC,0CAA0C,CAAC,CAAC;aAC3D,CAAC,CAAC;;AAEH,cAAE,CAAC,+CAA+C,EAAE,YAAM;AACtD,sBAAM,CAAC,YAAU;AACb,0BAAM,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;iBAChC,CAAC,CAAC,EAAE,SAAM,CAAC,4BAA4B,CAAC,CAAC;aAC7C,CAAC,CAAC;SAEN,CAAC,CAAC;KAEN,CAAC,CAAC","file":"test-kit/matchers/dataTypeMatchersSpec.js","sourcesContent":["import Typorama from '../../src'\nimport {aDataTypeWithSpec} from \"../testDrivers/index\";\nimport {expect, err} from \"chai\";\n\ndescribe('Type matchers', () => {\n\n    describe('Field matcher', () => {\n\n        var UserType = aDataTypeWithSpec({\n            name: Typorama.String\n        });\n\n        it('should reject types that do not have the requested field', () => {\n            expect(function(){\n                expect(UserType).to.have.field('noSuchField');\n            }).to.throw('expected a Type with a field noSuchField');\n        });\n\n        it('should reject objects that are not data types', () => {\n            expect(function(){\n                expect({}).to.have.field('');\n            }).to.throw('expected a Type but got {}');\n        });\n\n    });\n\n});\n"]}