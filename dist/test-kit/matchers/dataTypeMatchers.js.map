{"version":3,"sources":["..\\..\\..\\test-kit\\matchers\\dataTypeMatchers.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;QAAO,QAAQ;;qBAEA,UAAU,IAAI,EAAE,KAAK,EAAE;;AAElC,YAAI,CAAC,SAAS,CAAC,SAAS,CAAC,OAAO,EAAE,UAAU,IAAI,EAAE;AAC9C,gBAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;;AAErB,gBAAI,CAAC,MAAM,CACP,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,EACzD,gCAAgC,EAChC,oCAAoC,EACpC,QAAQ,CAAC,QAAQ,EACjB,IAAI,EACJ,IAAI,CACP,CAAC;;AAEF,gBAAI,QAAQ,GAAG,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,IAAI,CAAC;;AAE7C,gBAAI,IAAI,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC,IAAI,CAAC,CAAC;;AAEtC,gBAAI,CAAC,MAAM,CACP,IAAI,KAAK,SAAS,EAClB,+BAA+B,GAAG,IAAI,EACtC,kCAAkC,GAAG,IAAI,EACzC,IAAI,EACJ,SAAS,EACT,IAAI,CACP,CAAC;;AAEF,mBAAO,IAAI,kBAAkB,CAAC,EAAC,IAAI,EAAJ,IAAI,EAAE,IAAI,EAAJ,IAAI,EAAC,CAAC,CAAC;SAC/C,CAAC,CAAC;;YAEG,kBAAkB;qBAAlB,kBAAkB;sCAAlB,kBAAkB;;;;;;;sBAAlB,kBAAkB;;yBAAlB,kBAAkB;AAEpB,wBAAQ;;;;;;;;;;;uBAAA,UAAC,aAAa,EAAE;AACpB,4BAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;;AAEtB,4BAAI,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;;AAErC,4BAAI,CAAC,MAAM,CACP,QAAQ,KAAK,aAAa,EAC1B,mBAAkB,GAAG,KAAK,CAAC,IAAI,GAAG,yCAAwC,EAC1E,mBAAkB,GAAG,KAAK,CAAC,IAAI,GAAG,6CAA4C,EAC9E,aAAa,EACb,QAAQ,EACR,IAAI,CACP,CAAC;;AAEF,+BAAO,IAAI,kBAAkB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;qBAC9C;;AAED,oBAAI;2BAAA,cAAC,YAAY,EAAE;AACf,4BAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;;AAEtB,4BAAI,CAAC,MAAM,CACP,KAAK,CAAC,IAAI,CAAC,IAAI,KAAK,YAAY,CAAC,IAAI,EACrC,mBAAkB,GAAG,KAAK,CAAC,IAAI,GAAG,qCAAoC,EACtE,mBAAkB,GAAG,KAAK,CAAC,IAAI,GAAG,yCAAwC,EAC1E,YAAY,CAAC,WAAW,IAAI,YAAY,EACxC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,EAC9C,IAAI,CACP,CAAC;;AAEF,+BAAO,IAAI,kBAAkB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;qBAC9C;;;;mBAhCC,kBAAkB;WAAS,IAAI,CAAC,SAAS;KAmClD","file":"test-kit/matchers/dataTypeMatchers.js","sourcesContent":["import Typorama from '../../src';\n\nexport default function (chai, utils) {\n\n    chai.Assertion.addMethod(\"field\", function (name) {\n        var Type = this._obj;\n\n        this.assert(\n            Typorama.BaseType.prototype.isPrototypeOf(Type.prototype),\n            'expected a Type but got #{act}',\n            'expected not a Type but got #{act}',\n            Typorama.BaseType,\n            Type,\n            true\n        );\n\n        var TypeName = Type.displayName || Type.type;\n\n        var spec = Type.getFieldsSpec()[name];\n\n        this.assert(\n            spec !== undefined,\n            'expected a Type with a field ' + name,\n            'expected a Type without a field ' + name,\n            name,\n            undefined,\n            true\n        );\n\n        return new TypeFieldAssertion({spec, name});\n    });\n\n    class TypeFieldAssertion extends chai.Assertion {\n\n        defaults(expectedValue) {\n            var field = this._obj;\n\n            var defaults = field.spec.defaults();\n\n            this.assert(\n                defaults === expectedValue,\n                'expected field \"' + field.name + '\" defaults to be #{exp} but got #{act}',\n                'expected field \"' + field.name + '\" defaults not to be #{exp} but got #{act}',\n                expectedValue,\n                defaults,\n                true\n            );\n\n            return new TypeFieldAssertion(field, this);\n        }\n\n        type(expectedType) {\n            var field = this._obj;\n\n            this.assert(\n                field.spec.type === expectedType.type,\n                'expected field \"' + field.name + '\" type to be #{exp} but got #{act}',\n                'expected field \"' + field.name + '\" type not to be #{exp} but got #{act}',\n                expectedType.displayName || expectedType,\n                field.spec.type.displayName || field.spec.type,\n                true\n            );\n\n            return new TypeFieldAssertion(field, this);\n        }\n\n    }\n};\n"]}