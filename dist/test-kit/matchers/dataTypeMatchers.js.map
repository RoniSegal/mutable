{"version":3,"sources":["../../../test-kit/matchers/dataTypeMatchers.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,QAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;;QACpB,QAAQ;;QAET,kBAAkB;iBAAlB,kBAAkB;kCAAlB,kBAAkB;;;;;;;kBAAlB,kBAAkB;;qBAAlB,kBAAkB;AAEpB,oBAAQ;;;;;;;;;;;mBAAA,UAAC,aAAa,EAAC;AACnB,wBAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;;AAEtB,wBAAI,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;;AAErC,wBAAI,CAAC,MAAM,CACP,QAAQ,KAAK,aAAa,EAC1B,mBAAkB,GAAG,KAAK,CAAC,IAAI,GAAG,yCAAwC,EAC1E,mBAAkB,GAAG,KAAK,CAAC,IAAI,GAAG,6CAA4C,EAC9E,aAAa,EACb,QAAQ,EACR,IAAI,CACP,CAAC;;AAEF,2BAAO,IAAI,kBAAkB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;iBAC9C;;AAED,gBAAI;uBAAA,cAAC,YAAY,EAAC;AACd,wBAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;;AAEtB,wBAAI,CAAC,MAAM,CACP,KAAK,CAAC,IAAI,CAAC,IAAI,KAAK,YAAY,CAAC,IAAI,EACrC,mBAAkB,GAAG,KAAK,CAAC,IAAI,GAAG,qCAAoC,EACtE,mBAAkB,GAAG,KAAK,CAAC,IAAI,GAAG,yCAAwC,EAC1E,YAAY,CAAC,WAAW,IAAI,YAAY,EACxC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,EAC9C,IAAI,CACP,CAAC;;AAEF,2BAAO,IAAI,kBAAkB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;iBAC9C;;;;eAhCC,kBAAkB;OAAS,IAAI,CAAC,SAAS;;AAoC/C,QAAI,CAAC,SAAS,CAAC,SAAS,CAAC,OAAO,EAAE,UAAS,IAAI,EAAC;AAC5C,YAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;;AAErB,YAAI,CAAC,MAAM,CACP,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,EACzD,gCAAgC,EAChC,oCAAoC,EACpC,QAAQ,CAAC,QAAQ,EACjB,IAAI,EACJ,IAAI,CACP,CAAC;;AAEF,YAAI,QAAQ,GAAG,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,IAAI,CAAC;;AAE7C,YAAI,IAAI,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC,IAAI,CAAC,CAAC;;AAEtC,YAAI,CAAC,MAAM,CACP,IAAI,KAAK,SAAS,EAClB,+BAA+B,GAAG,IAAI,EACtC,kCAAkC,GAAG,IAAI,EACzC,IAAI,EACJ,SAAS,EACT,IAAI,CACP,CAAC;;AAEF,eAAO,IAAI,kBAAkB,CAAC,EAAE,IAAI,EAAJ,IAAI,EAAE,IAAI,EAAJ,IAAI,EAAE,CAAC,CAAC;KACjD,CAAC,CAAC","file":"test-kit/matchers/dataTypeMatchers.js","sourcesContent":["var chai = require('chai');\nimport Typorama from '../../src'\n\nclass TypeFieldAssertion extends chai.Assertion {\n\n    defaults(expectedValue){\n        var field = this._obj;\n\n        var defaults = field.spec.defaults();\n\n        this.assert(\n            defaults === expectedValue,\n            'expected field \"' + field.name + '\" defaults to be #{exp} but got #{act}',\n            'expected field \"' + field.name + '\" defaults not to be #{exp} but got #{act}',\n            expectedValue,\n            defaults,\n            true\n        );\n\n        return new TypeFieldAssertion(field, this);\n    }\n\n    type(expectedType){\n        var field = this._obj;\n\n        this.assert(\n            field.spec.type === expectedType.type,\n            'expected field \"' + field.name + '\" type to be #{exp} but got #{act}',\n            'expected field \"' + field.name + '\" type not to be #{exp} but got #{act}',\n            expectedType.displayName || expectedType,\n            field.spec.type.displayName || field.spec.type,\n            true\n        );\n\n        return new TypeFieldAssertion(field, this);\n    }\n\n}\n\nchai.Assertion.addMethod(\"field\", function(name){\n    var Type = this._obj;\n\n    this.assert(\n        Typorama.BaseType.prototype.isPrototypeOf(Type.prototype),\n        'expected a Type but got #{act}',\n        'expected not a Type but got #{act}',\n        Typorama.BaseType,\n        Type,\n        true\n    );\n\n    var TypeName = Type.displayName || Type.type;\n\n    var spec = Type.getFieldsSpec()[name];\n\n    this.assert(\n        spec !== undefined,\n        'expected a Type with a field ' + name,\n        'expected a Type without a field ' + name,\n        name,\n        undefined,\n        true\n    );\n\n    return new TypeFieldAssertion({ spec, name });\n});\n"]}