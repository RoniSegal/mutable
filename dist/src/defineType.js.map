{"version":3,"sources":["../../src/defineType.js"],"names":[],"mappings":";;;;;;;;;;;QAAO,CAAC;;QACI,eAAe;;QACpB,QAAQ;;qBAEA,UAAS,WAAW,EAAE,cAAc,EAAE,eAAe,EAAC;;AAEjE,uBAAe,GAAG,eAAe,IAAI,SAAS,IAAI,CAAC,KAAK,EAAE,UAAU,EAAE,OAAO,EAAC;AAC1E,oBAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;SACnD,CAAC;AACF,uBAAe,CAAC,WAAW,GAAa,WAAW,CAAC;AACpD,uBAAe,CAAC,IAAI,GAAoB,eAAe,CAAC;AACxD,uBAAe,CAAC,IAAI,GAAoB,eAAe,CAAC,IAAI,IAAI,eAAe,CAAC,YAAY,EAAE,CAAC;AAC/F,uBAAe,CAAC,WAAW,GAAa,eAAe,CAAC,WAAW,IAAI,eAAe,CAAC,mBAAmB,EAAE,CAAC;AAC7G,uBAAe,CAAC,QAAQ,GAAgB,eAAe,CAAC,QAAQ,IAAI,eAAe,CAAC,uBAAuB,EAAE,CAAC;AAC9G,uBAAe,CAAC,MAAM,GAAkB,QAAQ,CAAC,MAAM,CAAC;;AAExD,YAAG,CAAC,QAAQ,CAAC,SAAS,CAAC,aAAa,CAAC,eAAe,CAAC,SAAS,CAAC,EAAC;AAC5D,2BAAe,CAAC,SAAS,GAAe,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;AAC1E,2BAAe,CAAC,SAAS,CAAC,WAAW,GAAG,eAAe,CAAC;SAC3D;;AAED,uBAAe,CAAC,aAAa,GAAW,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;AACxF,uBAAe,CAAC,KAAK,GAAmB,cAAc,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;AAC7E,uBAAe,CAAC,SAAS,GAAe,eAAe,CAAC,SAAS,IAAI,QAAQ,CAAC,SAAS,CAAC;;AAExF,uBAAe,CAAC,gBAAgB,CAAC,eAAe,CAAC,SAAS,EAAE,eAAe,CAAC,KAAK,CAAC,CAAC;;AAEnF,eAAO,eAAe,CAAC;KAC1B","file":"src/defineType.js","sourcesContent":["import _ from \"lodash\"\nimport * as defineTypeUtils from \"./defineTypeUtils\"\nimport BaseType from \"./BaseType\"\n\nexport default function(displayName, typeDefinition, TypeConstructor){\n\n    TypeConstructor = TypeConstructor || function Type(value, isReadOnly, options){\n        BaseType.call(this, value, isReadOnly, options);\n    };\n    TypeConstructor.displayName           = displayName;\n    TypeConstructor.type                  = TypeConstructor;\n    TypeConstructor.test                  = TypeConstructor.test || defineTypeUtils.generateTest();\n    TypeConstructor.withDefault           = TypeConstructor.withDefault || defineTypeUtils.generateWithDefault();\n    TypeConstructor.defaults              = TypeConstructor.defaults || defineTypeUtils.generateGetDefaultValue();\n    TypeConstructor.create                = BaseType.create;\n\n    if(!BaseType.prototype.isPrototypeOf(TypeConstructor.prototype)){\n        TypeConstructor.prototype             = Object.create(BaseType.prototype);\n        TypeConstructor.prototype.constructor = TypeConstructor;\n    }\n\n    TypeConstructor.getFieldsSpec         = typeDefinition.spec.bind(null, TypeConstructor);\n    TypeConstructor._spec                 = typeDefinition.spec(TypeConstructor);\n    TypeConstructor.wrapValue             = TypeConstructor.wrapValue || BaseType.wrapValue;\n\n    defineTypeUtils.generateFieldsOn(TypeConstructor.prototype, TypeConstructor._spec);\n\n    return TypeConstructor;\n};\n\n"]}